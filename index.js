import 'dotenv/config'
import {API, ButtonColor, Keyboard, Updates, Upload} from 'vk-io'
import mongoose from 'mongoose'
import fs from 'fs'
import path from 'path'
import User from './models/User.js'
import Meme from './models/Meme.js'

const api = new API({
  token: process.env.TOKEN
})

const upload = new Upload({
  api
})

const updates = new Updates({api, upload})
console.log('Bot started')
mongoose.connect('mongodb://127.0.0.1:27017/vezdekod-bot').then(() => console.log('DB Connected'))

updates.on('message', async(context) => {

  const sendMem = async() => {
    let file
    try {
      file = path.join('images', fs.readdirSync(path.join('images'))[Math.floor(Math.random() * fs.readdirSync(path.join('images')).length - 1)])
    } catch {
      file = path.join('images', fs.readdirSync(path.join('images'))[Math.floor(Math.random() * fs.readdirSync(path.join('images')).length - 1)])
    }
    const user = await User.findOne({id: context.senderId})
    if(user) {
      if(user.watched.length >= fs.readdirSync(path.join('images')).length) {
        return context.send('–í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–º—ã :(')
      }
      while (user.watched.includes(path.basename(file))) {
        console.log(file)
        try {
          file = path.join('images', fs.readdirSync(path.join('images'))[Math.floor(Math.random() * fs.readdirSync(path.join('images')).length - 1)])
        } catch {
          file = path.join('images', fs.readdirSync(path.join('images'))[Math.floor(Math.random() * fs.readdirSync(path.join('images')).length - 1)])
        }
      }
    }
    await upload.messagePhoto({
      source: {
        value: file
      }
    }).then((attachment) => {
      const keyboard = Keyboard.keyboard([
        [
          Keyboard.textButton({
            label: 'üëç',
            payload: {
              command: 'like',
              name: path.basename(file)
            },
            color: ButtonColor.POSITIVE
          }),
          Keyboard.textButton({
            label: 'üëé',
            payload: {
              command: 'dislike',
              name: path.basename(file)
            },
            color: ButtonColor.NEGATIVE
          })
        ],
        [
          Keyboard.textButton({
            label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            color: ButtonColor.SECONDARY
          })
        ],
      ]).oneTime()
      context.send('–õ–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫?', {attachment, keyboard})
    })
  }


  // console.log(context)
  if(context.text && (context.text.toLocaleLowerCase() === '–ø—Ä–∏–≤–µ—Ç' || context.text.toLocaleLowerCase() === '–Ω–∞—á–∞—Ç—å')) {
    context.send('–ü—Ä–∏–≤–µ—Ç –≤–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º!')
    const keyboard = Keyboard.keyboard([
      [
        Keyboard.textButton({
          label: '–ù–æ—Ä–º–∞–ª—å–Ω–æ',
          payload: {
            command: 'first_quest',
            value: 'norm'
          },
          color: Keyboard.POSITIVE_COLOR
        }),
        Keyboard.textButton({
          label: '–ù–µ –æ—á–µ–Ω—å',
          payload: {
            command: 'first_quest',
            value: 'takoe'
          },
          color: Keyboard.NEGATIVE_COLOR
        }),
      ],
      Keyboard.textButton({
        label: '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
        payload: {
          command: 'first_quest',
          value: 'skip'
        },
        color: Keyboard.SECONDARY_COLOR
      })
    ]).oneTime()
    context.send('1. –ö–∞–∫ —Ç—ã?', {keyboard})
  } else if(context.text && context.text.toLowerCase() === '–º–µ–º') {
    await sendMem()
  } else if(context.messagePayload && context.text === 'üëç' || context.text === 'üëé') {
    const user = await User.findOne({id: context.senderId})
    if(user) {
      if(context.messagePayload === 'like') {
        user.likes = user.likes + 1
        user.watched.push(context.messagePayload.name)
        user.memes.push({name: context.messagePayload.name, type: 'like'})
      } else {
        user.dislikes = user.dislikes + 1
        user.watched.push(context.messagePayload.name)
        user.memes.push({name: context.messagePayload.name, type: 'dislike'})
      }
      await user.save()
    } else if(!user && context.messagePayload.command === 'like') {
      const [user] = await api.users.get({user_ids: context.senderId})
      const newUser = new User({
        id: context.senderId,
        name: user.first_name,
        surname: user.last_name,
        likes: 1,
        dislikes: 0,
        watched: [context.messagePayload.name],
        memes: [{name: context.messagePayload.name, type: 'like'}]
      })
      await newUser.save()
    } else if(!user && context.messagePayload.command === 'dislike') {
      const [user] = await api.users.get({user_ids: context.senderId})
      const newUser = new User({
        id: context.senderId,
        name: user.first_name,
        surname: user.last_name,
        likes: 0,
        dislikes: 1,
        watched: [context.messagePayload.name],
        memes: [{name: context.messagePayload.name, type: 'dislike'}]
      })
      await newUser.save()
    }
    const mem = await Meme.findOne({file: context.messagePayload.name})
    if(mem) {
      if(context.messagePayload.command === 'like') {
        mem.likes = mem.likes + 1
      } else {
        mem.dislikes = mem.dislikes + 1
      }
      await mem.save()
    }
    if(!mem && context.messagePayload.command === 'like') {
      const newMem = new Meme({
        id: await Meme.count(),
        file: context.messagePayload.name,
        likes: 1,
        dislikes: 0
      })
      await newMem.save()
    } else if(!mem && context.messagePayload.command === 'dislike') {
      const newMem = new Meme({
        id: await Meme.count(),
        file: context.messagePayload.name,
        likes: 0,
        dislikes: 1
      })
      await newMem.save()
    }
    await sendMem()
  } else if(context.text && context.text.toLocaleLowerCase() === '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
    const users = await User.find({}, {_id: 0, watched: 0, memes: 0, __v: 0})
    let result = ''
    users.forEach(async(e, i) => {
      result += `${i + 1}. ${e.name} ${e.surname}: –ª–∞–π–∫–æ–≤: ${e.likes}; –¥–∏–∑–ª–∞–π–∫–æ–≤: ${e.dislikes}<br>`
    })
    context.send(result, {keyboard: Keyboard.keyboard([
      [Keyboard.textButton({label: '–ú–µ–º', color: ButtonColor.PRIMARY})],
      [Keyboard.textButton({label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', color: ButtonColor.SECONDARY})]
    ])})
  } else {
    if(context.messagePayload && context.messagePayload.command === 'first_quest') {
      context.send(`${context.messagePayload.value === 'skip' ? 
      '–ü—Ä–æ–ø—É—Å–∫–∞–µ—à—å? –ù—É –ª–∞–¥–Ω–æ..(' : context.messagePayload.value === 'norm' ? 
      '–†–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!' : '–ü–ª–æ—Ö–æ, —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å, –Ω–æ –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º...'}`)
      const keyboard = Keyboard.keyboard([
        [
          Keyboard.textButton({
            label: '–†–æ—Å—Å–∏—è',
            payload: {
              command: 'second_quest',
              value: 'ru'
            },
            color: Keyboard.PRIMARY_COLOR
          }),
          Keyboard.textButton({
            label: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
            payload: {
              command: 'second_quest',
              value: 'kz'
            },
            color: Keyboard.PRIMARY_COLOR
          }),
        ],
        Keyboard.textButton({
          label: '–î—Ä—É–≥–æ–µ',
          payload: {
            command: 'second_quest',
            value: 'other'
          },
          color: Keyboard.SECONDARY_COLOR
        })
      ]).inline()
      context.send('2. –ì–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?', {keyboard})
    } else if(context.messagePayload && context.messagePayload.command === 'second_quest') {
      context.send(`${context.messagePayload.value === 'ru' ? 
      '–ú—ã —Å —Ç–æ–±–æ–π —Ç–∞–∫ –ø–æ—Ö–æ–∂–∏, –º–æ–∂–µ—Ç, —ç—Ç–æ —Å—É–¥—å–±–∞?' : context.messagePayload.value === 'kz' ? 
      '–°–æ—Å–µ–¥—è–º –∫—É, –æ—Å—Ç–∞–ª—å–Ω—ã–º —Å–æ–±–æ–ª–µ–∑–Ω—É—é' : '—ã–∞—ã–∞??'}`)
      const keyboard = Keyboard.keyboard([
        [
          Keyboard.urlButton({
            label: '–ö–æ–Ω–µ—á–Ω–æ —Ö–æ—á—É!',
            url: 'https://catlense.ru',
          }),
        ],
        [
          Keyboard.textButton({
            label: '–Ø –ø–µ—Ä–µ—à—ë–ª',
            payload: {
              command: 'third_quest',
              value: 'yes'
            },
            color: Keyboard.POSITIVE_COLOR
          })
        ],
        [
          Keyboard.textButton({
            label: '–ù–µ —Ö–æ—á—É',
            payload: {
              command: 'third_quest',
              value: 'no'
            },
            color: Keyboard.NEGATIVE_COLOR
          })
        ],
      ])
      context.send('3. –•–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –º–æ–π —Å–∞–π—Ç?', {keyboard})
      
    } else if(context.messagePayload && context.messagePayload.command === 'third_quest') {
      context.send(`${context.messagePayload.value === 'yes' ? 
      '–°–ø–∞—Å–∏–±–æ, –º–Ω–µ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!' : '–ë–ª–∏–Ω, –Ω—É –ª–∞–¥–Ω–æ('}`)
      const keyboard = Keyboard.keyboard([
        [
          Keyboard.locationRequestButton({
            payload: {
              command: 'fourth_quest',
              value: 'ok'
            }
          }),
        ],
        [
          Keyboard.textButton({
            label: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
            payload: {
              command: 'fourth_quest',
              value: 'skip'
            }
          })
        ]
      ]).oneTime()
      context.send('4. –ú–æ–∂–µ—à—å –ª–∏ —Ç—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º?', {keyboard})
    } else if(context.messagePayload && context.messagePayload.command === 'fourth_quest') {
      context.send(`${context.messagePayload.value === 'ok' ? 
      '–ñ–¥–∏ –≤ –≥–æ—Å—Ç–∏ <3' : '–ó–≤—É–∫ –ø–æ-–∞–Ω–æ–Ω–∏–º–æ–≤—Å–∫–∏'}`)
      const keyboard = Keyboard.keyboard([
        [
          Keyboard.payButton({
            hash: {
              action: 'transfer-to-group',
              group_id: 207846662,
              aid: 10
            },
            payload: {
              command: 'fifth_quest',
              value: 'pay'
            }
          }),
        ],
        [
          Keyboard.textButton({
            label: '–í –∫—É—Ä—Å–µ!',
            payload: {
              command: 'fifth_quest',
              value: 'skip'
            },
            color: ButtonColor.POSITIVE
          })
        ]
      ]).oneTime()
      context.send('5. –¢—ã –≤–æ–æ–±—â–µ –≤ –∫—É—Ä—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é VK Pay?', {keyboard})
    } else if(context.messagePayload && context.messagePayload.command === 'fifth_quest') {
      context.send(`${context.messagePayload.value === 'pay' ? 
      '–£–∞–∞–∞–∞—É' : '–û—Ç–ª–∏—á–Ω–æ!'}`)
      const keyboard = Keyboard.keyboard([
        [
          Keyboard.textButton({
            label: '8',
            payload: {
              command: 'sixth_quest',
              value: '8'
            },
            color: ButtonColor.POSITIVE
          }),
          Keyboard.textButton({
            label: '6',
            payload: {
              command: 'sixth_quest',
              value: '6'
            },
            color: ButtonColor.NEGATIVE
          }),
          Keyboard.textButton({
            label: '1010101',
            payload: {
              command: 'sixth_quest',
              value: '1010101'
            },
            color: ButtonColor.NEGATIVE
          }),
        ],
        [
          Keyboard.textButton({
            label: '10',
            payload: {
              command: 'sixth_quest',
              value: '10'
            },
          })
        ],
        [
          Keyboard.textButton({
            label: '12',
            payload: {
              command: 'sixth_quest',
              value: '12'
            },
          }),
          Keyboard.textButton({
            label: '14',
            payload: {
              command: 'sixth_quest',
              value: '14'
            },
          }),
        ]
      ]).inline()
      context.send('6. –ö—Å—Ç–∞—Ç–∏, –∞ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2 * 2?', {keyboard})
    } else if(context.messagePayload && context.messagePayload.command === 'sixth_quest') {
      context.send(`${context.messagePayload.value === '6' ? 
      '–î–∞ —Ç—ã –ø—Ä—è–º –≥–µ–Ω–∏–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏!' : 'wow'}`)

      const keyboard = Keyboard.keyboard([
        [
          Keyboard.textButton({
            label: '–•–æ—Ä–æ–æ–æ—à',
            payload: {
              command: 'seventh_quest',
              value: 'norm'
            },
            color: ButtonColor.POSITIVE
          }),
          Keyboard.textButton({
            label: '–ú–µ–≥–∞—Ö–æ—Ä–æ—à',
            payload: {
              command: 'seventh_quest',
              value: 'meganorm'
            },
            color: ButtonColor.POSITIVE
          })
        ],
        [
          Keyboard.textButton({
            label: '–ü–æ–π–¥—ë—Ç',
            payload: {
              command: 'seventh_quest',
              value: 'takoe'
            }
          })
        ],
        [
          Keyboard.textButton({
            label: '–ù–µ –æ—á',
            payload: {
              command: 'seventh_quest',
              value: 'bad'
            },
            color: ButtonColor.NEGATIVE
          }),
          Keyboard.textButton({
            label: '–û—á –Ω–µ –æ—á',
            payload: {
              command: 'seventh_quest',
              value: 'sobad'
            },
            color: ButtonColor.NEGATIVE
          })
        ]
      ]).oneTime()
      context.send('7. –ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ —Ç–µ–±–µ tpoksy?', {keyboard})
    } else if(context.messagePayload && context.messagePayload.command === 'seventh_quest') {
      context.send(`${context.messagePayload.value === 'norm' || 'meganorm' ? 
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!' : '–ë–ª–∏–Ω–±, –ª–∞–¥–Ω–æ((('}`)

      const keyboard = Keyboard.keyboard([
        [
          Keyboard.applicationButton({
            label: '–ß–∞—Ç–±–æ—Ç—ã',
            appId: 6013442,
            ownerId: -197700721,
          })
        ],
        [
          Keyboard.textButton({
            label: '–û—Ç–∫—Ä—ã–ª–∏!',
            payload: {
              command: 'eighth_quest',
              value: 'true'
            },
            color: ButtonColor.POSITIVE
          })
        ]
      ]).oneTime()

      context.send('8. –î–∞–≤–∞–π –æ—Ç–∫—Ä–æ–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?', {keyboard})
    } else if(context.messagePayload && context.messagePayload.command === 'eighth_quest') {
      context.send(`${context.messagePayload.value === 'true' && 
      '–ù–∞–¥–µ—é—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª)'}`)
    }
  }
})

updates.start()